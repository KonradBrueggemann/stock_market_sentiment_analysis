from dataframes.scores_for_source import ScoreChart

import pandas as pd
import time


class DataFrame:
    def __init__(self, query, start_date, end_date, sources):
        self.query = query
        self.start = start_date
        self.end = end_date
        self.sources = sources
        self.dates = self.list_of_dates()   # list of all dates within timeframe (start-end), in D-M-Y format
        self.dataframe = self.convert_to_pandas_df()

    def list_of_dates(self):
        """ generates a list of dates between two dates """
        date_list = []

        start_chops = self.start.split("-")
        month = int(start_chops[1])   # the input is a string like "12-05-2022"
        year = int(start_chops[2])    # so the first slice is the day, which will be gradually increased
        start = int(start_chops[0])

        end_chops = self.end.split("-")
        end = int(end_chops[0])

        # this currently only works within the same month
        # so its best to use it for time frames that go from first of month to end of month
        for i in range(start, end + 1):
            date = f"{i}-{month}-{year}"
            date_list.append(date)

        return date_list

    def get_sentiment_score(self, start, end):
        score = ScoreChart(self.query, start, end, self.sources)
        return score.get_polarity_score()

    @staticmethod
    def calc_day_after(date):
        """
        simple method to increase the day in a D-M-Y date string by 1
        doesnt account for months (yet)
        """
        date_chops = date.split("-")
        month = int(date_chops[1])
        year = int(date_chops[2])
        day = int(date_chops[0])
        res = f"{day+1}-{month}-{year}"
        return res

    def run_through_datelist(self):
        """ iterates through the date list to get the SP score for each day """
        date_score_dict = {}
        for start_date in self.dates:
            end_date = self.calc_day_after(start_date)   # to get the comments of day X, do X-M-Y to (X+1)-M-Y
            date_score_dict[start_date] = self.get_sentiment_score(start_date, end_date)
            time.sleep(1)   # this makes sure the pushshift.io API is ready for the next request
        return date_score_dict

    def convert_to_pandas_df(self):
        """ simple method to turn the dictionary generated by the run_through_datelist() function into a dataframe """
        data = self.run_through_datelist()   # returns dict
        date_col = data.keys()    # get dates
        value_col = data.values()   # get SP scores
        frame = {"Date": date_col, "Sentiment Score": value_col}
        return pd.DataFrame.from_dict(frame)

    def save_to_csv(self):
        file = self.dataframe
        file.to_csv(f'output/{self.query}.csv', index=False, sep=";")


q = "TSLA"
after = "01-11-2022"
before = "29-11-2022"

if __name__ == "__main__":
    df = DataFrame(q, after, before)
    print(df.convert_to_pandas_df())
